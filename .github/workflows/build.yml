name: Build

on:
  push:
    branches: main
  pull_request:
    branches: '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Base Setup
      uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

    - name: Install dependencies
      run: python -m pip install -U "jupyterlab>=4.0.0,<5"

    - name: Lint the extension
      run: |
        set -eux
        jlpm
        jlpm run lint:check

    - name: Test the extension
      run: |
        set -eux
        jlpm run test

  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Base Setup
      uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

    - name: Install dependencies
      run: python -m pip install -U "jupyterlab>=4.0.0,<5"

    - name: Restore Playwright browsers cache
      uses: actions/cache@v4
      with:
        path: /home/runner/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-v1
        restore-keys: |
          playwright-browsers-${{ runner.os }}-

    - name: Build the extension
      run: |
        set -eux
        python -m pip install .[test]

        jupyter labextension list
        jupyter labextension list 2>&1 | grep -ie "jupytereverywhere.*OK"
        JLAB_BROWSER_TYPE=firefox python -m jupyterlab.browser_check

    - name: Package the extension
      run: |
        set -eux

        pip install build
        python -m build
        pip uninstall -y "jupytereverywhere" jupyterlab

    - name: Upload extension packages
      uses: actions/upload-artifact@v4
      with:
        name: extension-artifacts
        path: dist/jupytereverywhere*
        if-no-files-found: error

  lite:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install micromamba
      uses: mamba-org/setup-micromamba@b09ef9b599704322748535812ca03efb2625677b # v2.0.5

    - uses: actions/download-artifact@v4
      with:
        name: extension-artifacts

    - name: Install the dependencies
      run: |
        cd lite
        pip install -r requirements.txt

    - name: Install Jupyter Everywhere extension
      run: |
        pip install jupytereverywhere*.whl

    - name: Install jlpm
      run: |
        set -eux
        python -m pip install "jupyterlab>=4.0.0,<5"

    - name: Build the JupyterLite app
      run: |
        cd lite
        bash ../.github/inject-gh-pages-config.sh
        cd ..
        jlpm install
        jlpm build:all

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: lite-app
        path: ./dist
        if-no-files-found: error

    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./dist

    - name: Publish preview to Netlify
      uses: netlify/actions/cli@3185065f4ab2f6df6f2ef41ee013626e1c02a426
      id: deploy_preview
      with:
        args: deploy --dir=./dist --alias=preview-${{ github.event.number }}
      env:
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

    - uses: actions/github-script@v7
      with:
        script: |
          const issue_number = context.issue.number;
          const owner = context.repo.owner;
          const repo = context.repo.repo;
  
          const marker = '<!-- netlify-url-comment -->';
  
          const body = `${marker}\nNetlify URL: ${{ steps.deploy_preview.outputs.NETLIFY_URL }} !`;
  
          const { data: comments } = await github.rest.issues.listComments({
            issue_number,
            owner,
            repo,
          });
  
          const existing = comments.find(comment =>
            comment.user.type === 'Bot' && comment.body.includes(marker)
          );
  
          if (!existing) {
            await github.rest.issues.createComment({
              issue_number,
              owner,
              repo,
              body,
            });
          } else {
            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: existing.id,
              body,
            });
          }

    - name: Build landing page and JupyterLite app (in test mode)
      run: |
        rm -rf dist dist-test
        cd lite
        bash ../ui-tests/inject-test-config.sh
        cd ..
        jlpm install
        jlpm build:all
        mv dist dist-test


    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: lite-app-test
        path: ./dist-test
        if-no-files-found: error

    - name: Leave instructions for testing
      run: |
        echo "### JupyterLite App is ready" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "To test on netlify: ${{ steps.deploy_preview.outputs.NETLIFY_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo 'To test it locally, download the `lite-app` artifact and run' >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "rm -r lite-app" >> $GITHUB_STEP_SUMMARY
        echo "unzip lite-app.zip -d lite-app" >> $GITHUB_STEP_SUMMARY
        echo "cd lite-app" >> $GITHUB_STEP_SUMMARY
        echo "python -m http.server -b 127.0.0.1" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo 'And navigate to http://127.0.0.1:8000/' >> $GITHUB_STEP_SUMMARY
        echo 'Press ctrl + c to stop the server.' >> $GITHUB_STEP_SUMMARY

  deploy:
    needs: lite
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Publish to Netlify
        uses: netlify/actions/cli@3185065f4ab2f6df6f2ef41ee013626e1c02a426
        with:
          args: deploy --dir=dist --prod
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  test_isolated:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        architecture: 'x64'
    - uses: actions/download-artifact@v4
      with:
        name: extension-artifacts
    - name: Install and Test
      run: |
        set -eux
        # Remove NodeJS, twice to take care of system and locally installed node versions.
        sudo rm -rf $(which node)
        sudo rm -rf $(which node)

        pip install "jupyterlab>=4.0.0,<5" jupytereverywhere*.whl


        jupyter labextension list
        jupyter labextension list 2>&1 | grep -ie "jupytereverywhere.*OK"
        python -m jupyterlab.browser_check --no-browser-test

  integration-tests:
    name: Integration tests
    needs: lite
    runs-on: ubuntu-latest

    env:
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Base Setup
      uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

    - name: Download lite app (test mode)
      uses: actions/download-artifact@v4
      with:
        name: lite-app-test
        path: dist

    - name: Install jlpm
      run: |
        set -eux
        python -m pip install "jupyterlab>=4.0.0,<5"

    - name: Install dependencies
      working-directory: ui-tests
      env:
        YARN_ENABLE_IMMUTABLE_INSTALLS: 0
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      run: jlpm install

    - name: Set up browser cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/pw-browsers
        key: ${{ runner.os }}-${{ hashFiles('ui-tests/yarn.lock') }}

    - name: Install browser
      run: jlpm playwright install chromium
      working-directory: ui-tests

    - name: Execute integration tests
      working-directory: ui-tests
      run: |
        jlpm playwright test --browser chromium

    - name: Upload Playwright Test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jupytereverywhere-playwright-tests
        path: |
          ui-tests/test-results
          ui-tests/playwright-report
