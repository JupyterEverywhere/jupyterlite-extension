name: Build

on:
  push:
    branches: main
  pull_request:
    branches: '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    name: "Lint and Test"

    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        persist-credentials: false

    - name: Base Setup
      uses: jupyterlab/maintainer-tools/.github/actions/base-setup@affc83be6020d529b9368cd4d63e467877606600 # v1

    - name: Install dependencies
      run: python -m pip install -U "jupyterlab>=4.0.0,<5"

    - name: Lint the extension
      run: |
        set -eux
        jlpm
        jlpm run lint:check

    - name: Test the extension
      run: |
        set -eux
        jlpm run test

  build:
    name: Build JupyterLite extension
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        persist-credentials: false

    - name: Base Setup
      uses: jupyterlab/maintainer-tools/.github/actions/base-setup@affc83be6020d529b9368cd4d63e467877606600 # v1

    - name: Install dependencies
      run: python -m pip install -U "jupyterlab>=4.0.0,<5"

    - name: Restore Playwright browsers cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: /home/runner/.cache/ms-playwright
        key: playwright-browsers-${{ runner.os }}-v1
        restore-keys: |
          playwright-browsers-${{ runner.os }}-

    - name: Build the extension
      run: |
        set -eux
        python -m pip install .[test]

        jupyter labextension list
        jupyter labextension list 2>&1 | grep -ie "jupytereverywhere.*OK"
        JLAB_BROWSER_TYPE=firefox python -m jupyterlab.browser_check

    - name: Package the extension
      run: |
        set -eux

        pip install build
        python -m build
        pip uninstall -y "jupytereverywhere" jupyterlab

    - name: Upload extension packages
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: extension-artifacts
        path: dist/jupytereverywhere*
        if-no-files-found: error

  lite:
    name: Build JupyterLite app (${{ matrix.mode }})
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        mode: [test, prod]
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        persist-credentials: false

    - name: Setup Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
      with:
        python-version: '3.11'

    - name: Install micromamba
      uses: mamba-org/setup-micromamba@b09ef9b599704322748535812ca03efb2625677b # v2.0.5

    - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      with:
        name: extension-artifacts

    - name: Install the dependencies
      run: |
        cd lite
        pip install -r requirements.txt

    - name: Install Jupyter Everywhere extension
      run: |
        pip install jupytereverywhere*.whl

    - name: Install jlpm
      run: |
        set -eux
        python -m pip install "jupyterlab>=4.0.0,<5"

    - name: Build the JupyterLite app in ${{ matrix.mode }} mode
      env:
        MATRIX_MODE: ${{ matrix.mode }}
      run: |
        cd lite
        if [[ "${MATRIX_MODE}" == "prod" ]]; then
          echo "Building JupyterLite app in production mode"
          bash ../.github/inject-gh-pages-config.sh
        else
          echo "Building JupyterLite app in test mode"
          bash ../ui-tests/inject-test-config.sh
        fi
        cd ..
        jlpm install
        jlpm build:all

    - name: Upload artifact (${{ matrix.mode }})
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: lite-app-${{ matrix.mode }}
        path: ./dist
        if-no-files-found: error

    - name: Upload GitHub Pages artifact for production mode
      if: matrix.mode == 'prod'
      uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3
      with:
        path: ./dist

    - name: Leave instructions for testing
      if: matrix.mode == 'prod'
      run: |
        echo "### JupyterLite App is ready" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo 'To test it locally, download the `lite-app-prod` artifact and run' >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "rm -r lite-app-prod" >> $GITHUB_STEP_SUMMARY
        echo "unzip lite-app-prod.zip -d lite-app" >> $GITHUB_STEP_SUMMARY
        echo "cd lite-app" >> $GITHUB_STEP_SUMMARY
        echo "python -m http.server -b 127.0.0.1" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo 'And navigate to http://127.0.0.1:8000/' >> $GITHUB_STEP_SUMMARY
        echo 'Press ctrl + c to stop the server.' >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to GitHub Pages and Netlify
    needs: lite
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4

  deploy-netlify:
    name: Deploy to Netlify
    needs: lite
    if: github.ref == 'refs/heads/main'

    runs-on: ubuntu-latest
    steps:
      - name: Download lite app
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: lite-app-prod
          path: dist

      - name: Publish to Netlify
        uses: netlify/actions/cli@3185065f4ab2f6df6f2ef41ee013626e1c02a426 # 3185065f4ab2f6df6f2ef41ee013626e1c02a426
        with:
          args: deploy --dir=dist --prod
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}


  test_isolated:
    name: Isolated extension test
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Install Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
      with:
        python-version: '3.9'
        architecture: 'x64'
    - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      with:
        name: extension-artifacts
    - name: Install and Test
      run: |
        set -eux
        # Remove NodeJS, twice to take care of system and locally installed node versions.
        sudo rm -rf $(which node)
        sudo rm -rf $(which node)

        pip install "jupyterlab>=4.0.0,<5" jupytereverywhere*.whl


        jupyter labextension list
        jupyter labextension list 2>&1 | grep -ie "jupytereverywhere.*OK"
        python -m jupyterlab.browser_check --no-browser-test

  integration-tests:
    name: Integration tests
    needs: lite
    runs-on: ubuntu-latest

    env:
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        persist-credentials: false

    - name: Base Setup
      uses: jupyterlab/maintainer-tools/.github/actions/base-setup@affc83be6020d529b9368cd4d63e467877606600 # v1

    - name: Download lite app (test mode)
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      with:
        name: lite-app-test
        path: dist

    - name: Install jlpm
      run: |
        set -eux
        python -m pip install "jupyterlab>=4.0.0,<5"

    - name: Install dependencies
      working-directory: ui-tests
      env:
        YARN_ENABLE_IMMUTABLE_INSTALLS: 0
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      run: jlpm install

    - name: Set up browser cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ${{ github.workspace }}/pw-browsers
        key: ${{ runner.os }}-${{ hashFiles('ui-tests/yarn.lock') }}

    - name: Install browser
      run: jlpm playwright install chromium
      working-directory: ui-tests

    - name: Execute integration tests
      working-directory: ui-tests
      run: |
        jlpm playwright test --browser chromium

    - name: Upload Playwright Test report
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: jupytereverywhere-playwright-tests
        path: |
          ui-tests/test-results
          ui-tests/playwright-report
